import { types, applySnapshot } from 'mobx-state-tree';
import { Card, CardStack } from './Card';
import { Card as CardType } from '../types/cardTypes';
import {
  generateCardDescription,
  generateIdFromName,
} from '../utils/cardGenerator';

export const CardEditorStore = types
  .model('CardEditor', {
    currentCard: types.optional(types.reference(Card), ''),
    autoGenerateDescription: types.boolean,
    cardLibrary: CardStack,
  })
  .actions(self => ({
    afterCreate() {
      // Set the current card to the first card from the library
      self.currentCard = self.cardLibrary.cards[0];
    },
    updateCurrentCard(card: Partial<CardType>) {
      // Update the id if the name is changed
      const id = card.name ? generateIdFromName(card.name) : '';

      // Use the description if it was passed in, otherwise if
      // auto generate description is selected and the category or
      // effects were changed, then we regenerate a card description
      const description = card.description
        ? card.description
        : self.autoGenerateDescription && (card.category || card.effects)
          ? generateCardDescription(
              /* tslint:disable no-any unfortunately because MobX State Tree types are bad... */
              card.category || (self.currentCard.category as any),
              card.effects || (self.currentCard.effects as any)
            )
          : '';

      const newSnapshot = {
        ...self.currentCard,
        ...card,
        id: id || self.currentCard.id,
        description: description || self.currentCard.description,
      };

      // Update the card with its new snapshot
      applySnapshot(self.currentCard, newSnapshot);
    },
    toggleAutoGenerateDescription() {
      self.autoGenerateDescription = !self.autoGenerateDescription;

      // If auto generate description was selected then we generate a card description
      if (self.autoGenerateDescription) {
        self.currentCard.description = generateCardDescription(
          self.currentCard.category as any,
          self.currentCard.effects as any
        );
      }
    },
  }));

export type CardEditorStoreModelType = typeof CardEditorStore.Type;

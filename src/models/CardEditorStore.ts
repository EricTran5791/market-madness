import { types, applySnapshot, getSnapshot } from 'mobx-state-tree';
import { Card, CardModelSnapshotType } from './Card';
import { Card as CardType } from '../types/cardTypes';
import {
  generateCardDescription,
  generateIdFromName,
} from '../utils/cardGenerator';

export enum MessageBarKind {
  None = 'None',
  Success = 'Success',
  Error = 'Error',
}

export type MessageBarParams = {
  kind: MessageBarKind;
  text: string;
};

export const CardEditorStore = types
  .model('CardEditorStore', {
    /** The initial state of the card before performing any updates. */
    initialCard: types.frozen,
    /** A copy of the card that is being edited. */
    currentCard: Card,
    autoGenerateDescription: types.boolean,
    messageBar: types.model('MessageBar', {
      kind: types.enumeration(
        'MessageBarKind',
        Object.keys(MessageBarKind).map(key => MessageBarKind[key])
      ),
      text: types.string,
    }),
  })
  .views(self => ({
    /** Returns true if the initial card JSON is different than the current card JSON. */
    get containsNewChanges(): boolean {
      return (
        JSON.stringify(self.initialCard) !==
        JSON.stringify(getSnapshot(self.currentCard))
      );
    },
  }))
  .actions(self => {
    function updateCurrentCard(card: Partial<CardType>) {
      // Update the id if the name is changed
      const id = card.name ? generateIdFromName(card.name) : '';

      // Use the description if it was passed in, otherwise if
      // auto generate description is selected and the category or
      // effects were changed, then we regenerate a card description
      const description = card.description
        ? card.description
        : self.autoGenerateDescription && (card.category || card.effects)
          ? generateCardDescription(
              /* tslint:disable no-any unfortunately because MobX State Tree types are bad... */
              card.category || (self.currentCard.category as any),
              card.effects || (self.currentCard.effects as any)
            )
          : '';

      const newSnapshot = {
        ...self.currentCard,
        ...card,
        id: id || self.currentCard.id,
        description: description || self.currentCard.description,
      };

      // Update the card with its new snapshot
      applySnapshot(self.currentCard, newSnapshot);
    }

    function toggleAutoGenerateDescription() {
      self.autoGenerateDescription = !self.autoGenerateDescription;

      // If auto generate description was selected then we generate a card description
      if (self.autoGenerateDescription) {
        self.currentCard.description = generateCardDescription(
          self.currentCard.category as any,
          self.currentCard.effects as any
        );
      }
    }

    function clearMessageBar() {
      self.messageBar = {
        kind: MessageBarKind.None,
        text: '',
      };
    }

    function setMessageBar({ kind, text }: MessageBarParams) {
      self.messageBar = { kind, text };
    }

    function setInitialCard(
      snapshot: CardModelSnapshotType,
      messageBarParams: MessageBarParams
    ) {
      self.initialCard = snapshot;
      self.currentCard = Card.create({ ...snapshot });
      if (messageBarParams) {
        setMessageBar(messageBarParams);
      }
      return;
    }

    return {
      updateCurrentCard,
      toggleAutoGenerateDescription,
      clearMessageBar,
      setMessageBar,
      setInitialCard,
    };
  });

export type CardEditorStoreModelType = typeof CardEditorStore.Type;
